<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xTheme="xFrame:Wpf.Theming"
                    xmlns:xFluent="clr-namespace:xFrame.WPF.Controls.Fluent">
    <Style TargetType="{x:Type Button}" x:Key="BaseButtonStyle">
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.ControlBackgroundColorBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.ForegroundColorBrush}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.BorderColorBrush}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.FontSizeRegular}}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="xFluent:Button.CornerRadius" Value="5"/>
        <Setter Property="xFluent:Button.HilightedElement" Value="Background"/>
        <Setter Property="xFluent:Button.HilightBrush" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.HoverColorBrush}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(xFluent:Button.CornerRadius)}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="{TemplateBinding Margin}"
                            Padding="{TemplateBinding Padding}"
                            x:Name="OuterBorder">

                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          TextBlock.Foreground="{TemplateBinding Foreground}"
                                          TextBlock.FontSize="{TemplateBinding FontSize}"
                                          TextBlock.FontFamily="{TemplateBinding FontFamily}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="xFluent:Button.HilightedElement" Value="Border"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="BorderBrush" 
                                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(xFluent:Button.HilightBrush)}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="xFluent:Button.HilightedElement" Value="Background"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background"
                                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(xFluent:Button.HilightBrush)}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.ButtonPressedColorBrush}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.ForegroundDisabeldColorBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.BorderColorBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static xTheme:DefaultThemeKeys.ForegroundDisabeldColorBrush}}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}"/>
</ResourceDictionary>