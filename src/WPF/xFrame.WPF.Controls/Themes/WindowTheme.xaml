<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:xFrame.WPF.Controls.Windows"
                    xmlns:controlzex="urn:controlzex"
                    xmlns:xFrame="xFrame/Wpf">

    <ControlTemplate TargetType="{x:Type local:Window}" x:Key="xFrameWindow">
        <Grid UseLayoutRounding="True"
              LayoutTransform="{Binding LayoutTransform, RelativeSource={RelativeSource TemplatedParent}}"
              RenderTransform="{Binding RenderTransform, RelativeSource={RelativeSource TemplatedParent}}"
              SnapsToDevicePixels="True">
            <AdornerDecorator x:Name="Adorner">
                <Grid x:Name="WindowRoot"
                      Background="{TemplateBinding Background}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <Grid x:Name="HeaderRootGrid"
                          Grid.Row="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>

                        <Image Grid.Column="0"
                               Source="{TemplateBinding Icon}"
                               RenderOptions.BitmapScalingMode="Fant"
                               Margin="5"/>
                        <Border x:Name="HeaderBorder"
                                Background="Transparent"
                                Grid.Column="1">
                            <ContentPresenter x:Name="PART_Header"
                                              Content="{TemplateBinding WindowHeader}"/>    
                        </Border>
                        
                        
                        <ContentPresenter x:Name="PART_WindowCommands"
                                          Grid.Column="2"
                                          HorizontalAlignment="Right"
                                          Panel.ZIndex="1"
                                          Content="{TemplateBinding WindowCommands}"/>
                    </Grid>

                    <ContentPresenter x:Name="PART_ContentPresenter"
                                      Grid.Row="1"/>

                </Grid>
            </AdornerDecorator>

            <Border x:Name="PART_Border"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Background="{x:Null}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    UseLayoutRounding="True" />

            <ResizeGrip x:Name="WindowResizeGrip"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        IsTabStop="false"
                        Visibility="Collapsed"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                    <Condition Property="WindowState" Value="Normal" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Border" Property="Visibility" Value="Visible" />
                <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter TargetName="Adorner" Property="Margin" Value="0" />
                <Setter TargetName="PART_Border" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="WindowCommandButton"
                     TargetType="{x:Type Button}">
        <Border Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}">
            <ContentPresenter x:Name="contentPresenter"
                              Margin="11 1 11 1"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="contentPresenter" Property="Opacity" Value=".75" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True" />
            <Trigger Property="ToggleButton.IsChecked" Value="True" />
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Button}" x:Key="WindowCommandButtonStyle">
        <Setter Property="Template" Value="{StaticResource WindowCommandButton}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static xFrame:ThemeColor.ForegroundColorBrushKey}}"/>
        <Style.Triggers>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCMouseOver" Value="True">
                <Setter Property="Background" Value="#a8a8a899"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}"
           x:Key="WindowCommandCloseButtonStyle"
           BasedOn="{StaticResource WindowCommandButtonStyle}">
        <Style.Triggers>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCMouseOver" Value="True">
                <Setter Property="Background" Value="DarkRed"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate TargetType="{x:Type local:WindowCommands}" x:Key="WindowCommands">
        <StackPanel Orientation="Horizontal">
            <Button x:Name="PART_MinimizeCommand"
                    Style="{StaticResource WindowCommandButtonStyle}"
                    Content="&#xE949;"
                    Padding="8,5"
                    SnapsToDevicePixels="True"
                    Focusable="False"
                    FontFamily="Segoe MDL2 Assets"
                    controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                    controlzex:NonClientControlProperties.HitTestResult="MINBUTTON"/>

            <Button x:Name="PART_MaximizeCommand"
                    Style="{StaticResource WindowCommandButtonStyle}"
                    Content="&#xE739;"
                    Padding="8,5"
                    SnapsToDevicePixels="True"
                    Focusable="False"
                    FontFamily="Segoe MDL2 Assets"
                    controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                    controlzex:NonClientControlProperties.HitTestResult="MAXBUTTON"/>

            <Button x:Name="PART_RestoreCommand"
                    Style="{StaticResource WindowCommandButtonStyle}"
                    Content="&#xE923;"
                    Padding="8,5"
                    SnapsToDevicePixels="True"
                    Focusable="False"
                    FontFamily="Segoe MDL2 Assets"
                    controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                    controlzex:NonClientControlProperties.HitTestResult="MAXBUTTON"/>

            <Button x:Name="PART_CloseCommand"
                    Style="{StaticResource WindowCommandCloseButtonStyle}"
                    Content="&#xE106;"
                    Padding="8,5"
                    SnapsToDevicePixels="True"
                    Focusable="False"
                    FontFamily="Segoe MDL2 Assets"
                    controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                    controlzex:NonClientControlProperties.HitTestResult="CLOSE"/>

        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="NoResize">
                <Setter TargetName="PART_MaximizeCommand" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_MinimizeCommand" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_RestoreCommand" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Maximized">
                <Setter TargetName="PART_MaximizeCommand" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Normal">
                <Setter TargetName="PART_RestoreCommand" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="CanMinimize">
                <Setter TargetName="PART_MaximizeCommand" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_RestoreCommand" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsPressed, ElementName=PART_CloseCommand}" Value="True">
                <Setter TargetName="PART_CloseCommand" Property="Background" Value="Red" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    

    <Style TargetType="{x:Type local:Window}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static xFrame:ThemeColor.BaseColorBrushKey}}"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template" Value="{StaticResource xFrameWindow}"/>
    </Style>

    <Style TargetType="{x:Type local:WindowCommands}">
        <Setter Property="Template" Value="{StaticResource WindowCommands}"/>
    </Style>

   



</ResourceDictionary>